// schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ----------------
// ENUMS
// ----------------

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum DiscountType {
  FIXED
  PERCENTAGE
}

// ----------------
// MODELS
// ----------------

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(CUSTOMER)
  carts     Cart[]
  orders    Order[]
  reviews   Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Address Address[]
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  parentId    String?
  children    Category[] @relation("CategoryToCategory")
  products    Product[]
}

model Product {
  id                    String      @id @default(uuid())
  name                  String
  description           String?
  sku                   String      @unique
  price                 Float
  stock                 Int         @default(0)
  lowStockThreshold     Int         @default(5)
  featured              Boolean     @default(false)
  discount              Float?
  category              Category?   @relation(fields: [categoryId], references: [id])
  categoryId            String?
  images                Image[]
  orderItems            OrderItem[]
  cartItems             CartItem[]
  reviews               Review[]
  features              String[]
  weight                Float?      @default(1.0) // Weight in kg
  weightUnit            String?     @default("kg") // Unit of weight (kg or lbs)
  dimensions            String? // Format: "length x width x height" in cm
  freeShippingThreshold Float?      @default(50)
  warrantyPeriod        String?     @default("2-Year Warranty")
  warrantyDescription   String?     @default("Extended coverage")
  returnPeriod          String?     @default("30-Day Returns")
  returnDescription     String?     @default("Hassle-free returns")
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  @@index([name])
  @@index([price])
  @@index([categoryId])
  @@index([featured])
}

model Image {
  id        String  @id @default(uuid())
  url       String
  altText   String?
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  cartItems CartItem[]
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
}

model Address {
  id             String  @id @default(uuid())
  user           User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?
  fullName       String
  line1          String
  line2          String?
  city           String
  state          String
  postalCode     String
  country        String
  phone          String?
  ordersShipping Order[] @relation("OrderShippingAddress")
  ordersBilling  Order[] @relation("OrderBillingAddress")
}

model Order {
  id                String          @id @default(uuid())
  user              User            @relation(fields: [userId], references: [id])
  userId            String
  orderItems        OrderItem[]
  totalAmount       Float
  shippingAddress   Address         @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id], onDelete: Cascade)
  shippingAddressId String
  billingAddress    Address         @relation("OrderBillingAddress", fields: [billingAddressId], references: [id], onDelete: Cascade)
  billingAddressId  String
  paymentMethod     String
  paymentStatus     PaymentStatus   @default(PENDING)
  orderStatus       OrderStatus     @default(PENDING)
  shippingMethod    ShippingMethod? @relation(fields: [shippingMethodId], references: [id])
  shippingMethodId  String?
  shippingCost      Float           @default(0.0)
  taxAmount         Float           @default(0.0)
  coupons           Coupon[]        @relation("OrderCoupons")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([userId])
  @@index([orderStatus])
}

model OrderItem {
  id         String  @id @default(uuid())
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  unitPrice  Float
  quantity   Int
  totalPrice Float
}

model Review {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  @@unique([productId, userId])
  @@index([rating])
}

model Coupon {
  id            String       @id @default(uuid())
  code          String       @unique
  description   String?
  discountType  DiscountType
  discountValue Float
  validFrom     DateTime
  validUntil    DateTime
  usageLimit    Int?
  usedCount     Int          @default(0)
  orders        Order[]      @relation("OrderCoupons")
  campaigns     Campaign[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([validUntil])
}

// Campaign model for marketing campaigns
model Campaign {
  id              String   @id @default(uuid())
  name            String
  description     String?
  imageUrl        String?
  coupon          Coupon   @relation(fields: [couponId], references: [id])
  couponId        String
  isActive        Boolean  @default(false)
  clickCount      Int      @default(0)
  conversionCount Int      @default(0)
  startDate       DateTime
  endDate         DateTime
  position        String? // e.g., "homepage_top", "homepage_bottom"
  targetAudience  String?
  goals           String?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([isActive])
  @@index([couponId])
}

// Site content management models
model HeroSection {
  id               String   @id @default(uuid())
  title            String?
  subtitle         String?
  description      String?
  primaryBtnText   String?
  primaryBtnLink   String?
  secondaryBtnText String?
  secondaryBtnLink String?
  imageUrl         String?
  active           Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model DealsBanner {
  id              String   @id @default(uuid())
  title           String?
  subtitle        String?
  description     String?
  buttonText      String?
  buttonLink      String?
  discount        String?
  imageUrl        String?
  backgroundColor String?
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Shipping method and rates models
model ShippingMethod {
  id            String         @id @default(uuid())
  name          String // e.g., "Standard", "Express", "Next Day"
  description   String?
  estimatedDays String // e.g., "3-5 days", "1-2 days" 
  isActive      Boolean        @default(true)
  defaultCost   Float // Default cost if no specific rate found
  orders        Order[]
  shippingRates ShippingRate[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model ShippingRate {
  id               String         @id @default(uuid())
  shippingMethod   ShippingMethod @relation(fields: [shippingMethodId], references: [id], onDelete: Cascade)
  shippingMethodId String
  country          String // For international rates, blank for domestic
  state            String? // Optional for state-specific rates
  postalCodePrefix String? // Optional for postal code specific rates
  minOrderAmount   Float? // Minimum order amount for this rate
  maxOrderAmount   Float? // Maximum order amount for this rate
  minWeight        Float? // Minimum weight in kg
  maxWeight        Float? // Maximum weight in kg
  cost             Float // Cost for this specific region and conditions
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([country, state, postalCodePrefix])
  @@index([shippingMethodId])
}

// Tax rate model for location-based taxation
model TaxRate {
  id               String   @id @default(uuid())
  country          String // Country code
  state            String? // State/province, optional for state-specific rates
  postalCodePrefix String? // For zip/postal code specific rates (e.g. first 3 digits)
  rate             Float // Tax rate as decimal (0.1 = 10%)
  description      String? // Optional description (e.g. "CA State Tax + County Tax")
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([country, state, postalCodePrefix])
}
